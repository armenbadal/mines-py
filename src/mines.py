import enum
import random

class State(enum.Enum):
    OPEN = 1
    CLOSED = 2
    FLAGGED = 3

class Cell:
    def __init__(self):
        self.state = State.CLOSED
        self.hasMine = False
        self.minesAround = 0

    def __str__(self):
        if self.state == State.CLOSED:
            return ' '
    
        if self.state == State.FLAGGED:
            return '‚öë'
    
        if self.hasMine:
            return 'üí£'
    
        if self.minesAround != 0:
            return str(self.minesAround)
    
        return ' '



class Field:
    DELTAS = [(-1, -1), (0, -1), (1, -1), (-1, 0), (1, 0), (-1, 1), (0, 1), (1, 1)]

    def __init__(self, rows, columns):
        # ’ø’∏’≤’•÷Ä’´ ÷Ñ’°’∂’°’Ø’®
        self.rows = rows
        # ’Ω’µ’∏÷Ç’∂’•÷Ä’´ ÷Ñ’°’∂’°’Ø’®
        self.columns = columns

        # ’°’Ø’°’∂’°’Ø’•’ø’•÷Ä’´ ’¥’°’ø÷Ä’´÷Å’®
        self.cells = [[Cell() for c in range(self.columns)] for r in range(self.rows)]
        # ’ø’•’≤’°’§÷Ä’•’¨ ’°’Ø’°’∂’∂’•÷Ä’® ÷á ’Ø’°’ø’°÷Ä’•’¨ ’∞’°’∑’æ’°÷Ä’Ø’∂’•÷Ä’®
        self._placeAllMines()

        # ÷Ñ’°’µ’¨’•÷Ä’´ ’∞’°’∑’æ’´’π
        self.stepsCounter = 0


    # ’°’Ø’°’∂’∂’•÷Ä’´ ’ø’°’≤’°’§÷Ä’•’¨’® ’∫’°’ø’°’∞’°’Ø’°’∂ ’æ’°’∂’§’°’Ø’∂’•÷Ä’∏÷Ç’¥
    def _placeAllMines(self):
        self.minesCount = int(self.rows * self.columns * 15 / 100)
        for m in range(self.minesCount):
            r, c = self._placeRandomMine()
            self._updateNumbersAround(r, c)


    # ’ø’•’≤’°’§÷Ä’•’¨ ’∫’°’ø’°’∞’°’Ø’°’∂ ’°’Ø’°’∂ ’∏÷Ç ’æ’•÷Ä’°’§’°÷Ä’±’∂’•’¨ ’§÷Ä’° ’§’´÷Ä÷Ñ’®
    def _placeRandomMine(self):
        r = random.randint(0, self.rows - 1)
        c = random.randint(0, self.columns - 1)

        if not self.cells[r][c].hasMine:
            self.cells[r][c].hasMine = True
            return (r, c)

        return self._placeRandomMine()


    # ’©’°÷Ä’¥’°÷Å’∂’•’¨ ’°’Ø’°’∂’´’∂ ’∑÷Ä’ª’°’∫’°’ø’∏’≤ ’æ’°’∂’§’°’Ø’∂’•÷Ä’´ ’©’æ’•÷Ä’®
    def _updateNumbersAround(self, row, column):
        for (dr, dc) in Field.DELTAS:
            nr, nc = row + dr, column + dc
            if nr in range(self.rows) and nc in range(self.columns):
                self.cells[nr][nc].minesAround += 1


    # ’¢’°÷Å’•’¨ ’æ’°’∂’§’°’Ø’®
    def open(self, row, column, count = True):
        # ’æ’•÷Ä÷Å’∂’•’¨ ’æ’°’∂’§’°’Ø’´ ’∞’≤’∏÷Ç’¥’®
        cell = self.cells[row][column]
        # ’•’©’• ’æ’°’∂’§’°’Ø’® ÷É’°’Ø ’ß, ...
        if cell.state == State.CLOSED:
            # ... ’°’∫’° ’¢’°÷Å’•’¨ ’°’µ’∂
            cell.state = State.OPEN

            # ’•’©’• ’∫’°÷Ä’¶’æ’∏÷Ç’¥ ’ß, ’∏÷Ä ’æ’°’∂’§’°’Ø’∏÷Ç’¥ ’°’Ø’°’∂ ’Ø’°, ...
            if cell.hasMine:
                # ... ’°’∫’° ’¢’°÷Å’•’¨ ’¢’∏’¨’∏÷Ä ’°’Ø’°’∂’∂’•÷Ä’∂ ’∏÷Ç ...
                for r in range(self.rows):
                    for c in range(self.columns):
                        if self.cells[r][c].hasMine:
                            self.cells[r][c].state = State.OPEN
                # ... ’°’æ’°÷Ä’ø’•’¨ ’≠’°’≤’®
                self.gameOver = True
            else:
                # ’•’©’• ’æ’°’∂’§’°’Ø’∏÷Ç’¥ ’°’Ø’°’∂ ’π’Ø’°, ...
                # ... ÷á ’∂÷Ä’° ’∞’°÷Ä÷á’°’∂’∂’•÷Ä’∏÷Ç’¥ ’ß’¨ ’°’Ø’°’∂’∂’•÷Ä ’π’Ø’°’∂, ...
                # ... ’°’∫’° ’¢’°÷Å’•’¨ ’∂’°÷á ’∞’°÷Ä÷á’°’∂’∂’•÷Ä’´’∂
                if cell.minesAround == 0:
                    for (dr, dc) in Field.DELTAS:
                        r = row + dr
                        c = column + dc
                        if r in range(self.rows) and c in range(self.columns):
                            self.open(r, c, False)
            # ’¥’•’Ø ÷Ñ’°’µ’¨
            if count:
                self.stepsCounter += 1


    # ’§÷Ä’∏’∑’°’Ø’∏’æ ’∂’∑’•’¨ ’æ’°’∂’§’°’Ø’®
    def flag(self, row, column):
        # ’æ’•÷Ä÷Å’∂’•’¨ ’æ’°’∂’§’°’Ø’´ ’∞’≤’∏÷Ç’¥’®
        cell = self.cells[row][column]
        # ’•’©’• ’æ’°’∂’§’°’Ø’® ÷É’°’Ø ’ß, ’°’∫’° ’°’µ’∂ ’∂’∑’•’¨ ’§÷Ä’∏’∑’°’Ø’∏’æ
        if cell.state == State.CLOSED:
            cell.state = State.FLAGGED
        # ’•’©’• ’°÷Ä’§’•’∂ ’∂’∑’æ’°’Æ ’ß ’§÷Ä’∏’∑’°’Ø’∏’æ, ’°’∫’° ’∞’°’∂’§’•’¨ ’°’µ’∂
        elif cell.state == State.FLAGGED:
            cell.state = State.CLOSED

